<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Viajes</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://jvsheng.github.io/blog/"/>
  <updated>2017-12-27T06:48:35.571Z</updated>
  <id>http://jvsheng.github.io/blog/</id>
  
  <author>
    <name>Viajes</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>element-ui collapse组件</title>
    <link href="http://jvsheng.github.io/blog/2017/12/27/element-ui%20collapse%E7%BB%84%E4%BB%B6/"/>
    <id>http://jvsheng.github.io/blog/2017/12/27/element-ui collapse组件/</id>
    <published>2017-12-27T06:39:47.000Z</published>
    <updated>2017-12-27T06:48:35.571Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Vue过渡动画钩子函数</li><li>自定义dispatch与broadcast</li><li>provide/inject的高阶使用<a id="more"></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Vue过渡动画钩子函数&lt;/li&gt;
&lt;li&gt;自定义dispatch与broadcast&lt;/li&gt;
&lt;li&gt;provide/inject的高阶使用
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>element-ui loading组件</title>
    <link href="http://jvsheng.github.io/blog/2017/12/24/element-ui%20loading%E7%BB%84%E4%BB%B6/"/>
    <id>http://jvsheng.github.io/blog/2017/12/24/element-ui loading组件/</id>
    <published>2017-12-24T12:27:37.000Z</published>
    <updated>2017-12-27T06:46:31.704Z</updated>
    
    <content type="html"><![CDATA[<ul><li>svg画loading动画</li><li>封装Vue指令与插件</li><li>Vue.extend的应用<a id="more"></a><script async src="//jsfiddle.net/Viajes/4yn8uybL/embed/html,css,result/"></script></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;svg画loading动画&lt;/li&gt;
&lt;li&gt;封装Vue指令与插件&lt;/li&gt;
&lt;li&gt;Vue.extend的应用
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript正则表达式 - 笔记</title>
    <link href="http://jvsheng.github.io/blog/2017/09/29/JavaScript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F-%E7%AC%94%E8%AE%B0/"/>
    <id>http://jvsheng.github.io/blog/2017/09/29/JavaScript正则表达式-笔记/</id>
    <published>2017-09-29T09:40:22.000Z</published>
    <updated>2017-12-27T06:37:28.126Z</updated>
    
    <content type="html"><![CDATA[<ul><li>可视化工具</li><li>正则表达式括号的作用</li><li>正则表达式回溯</li></ul><a id="more"></a><h2 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a><strong>可视化工具</strong></h2><iframe frameborder="0" width="348" height="208" src="https://jex.im/regulex/#!embed=true&flags=&re=%5E(a%7Cb)*%3F%24"></iframe><hr><h2 id="正则表达式括号的作用"><a href="#正则表达式括号的作用" class="headerlink" title="正则表达式括号的作用"></a><strong>正则表达式括号的作用</strong></h2><p><code>提取数据、JS中引用、正则表达式中反向引用</code></p><p><strong>1.1 分组</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/(ab)+<span class="regexp">/</span></div></pre></td></tr></table></figure></p><p>这里括号的作用在于，使 <code>+</code> 量词作用于 ab 这个整体</p><p><strong>1.2 分支结构</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/(a|b)/</div></pre></td></tr></table></figure></p><p>提供分支表达式的所有可能</p><p><strong>2.1 分组引用</strong></p><p><img src="/blog/img/17.9.30.1.jpg" alt="正则表达式分组"><br>正则引擎在匹配过程中，会为每一个分组开辟一个空间，用来存储每一个分组匹配到的数据。</p><p><strong>2.2 API中引用数据</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</div><div class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-12"</span>;</div><div class="line"><span class="built_in">console</span>.log(string.match(regex));</div><div class="line"><span class="comment">// =&gt;  ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]</span></div></pre></td></tr></table></figure></p><blockquote><p><code>match</code> 返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的<br>  内容，然后是匹配下标，最后是输入的文本。另外，正则表达式是否有修饰符 <code>g</code>，match<br>  返回的数组格式是不一样的。</p></blockquote><p>在运行一次正则操作后，RegExp对象上就可以通过<code>$1</code>访问匹配到的分组数据。我们可以在replace的第二个参数中，通过<code>函数</code>使用这些数据，进行替换等操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</div><div class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-12"</span>;</div><div class="line"><span class="keyword">var</span> result = string.replace(regex, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="built_in">RegExp</span>.$<span class="number">2</span> + <span class="string">"/"</span> + <span class="built_in">RegExp</span>.$<span class="number">3</span> + <span class="string">"/"</span> + <span class="built_in">RegExp</span>.$<span class="number">1</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(result);</div><div class="line"><span class="comment">// =&gt; "06/12/2017</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</div><div class="line"><span class="keyword">var</span> string = <span class="string">"2017-06-12"</span>;</div><div class="line"><span class="keyword">var</span> result = string.replace(regex, <span class="function"><span class="keyword">function</span> (<span class="params">match, year, month, day</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> month + <span class="string">"/"</span> + day + <span class="string">"/"</span> + year;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(result);</div><div class="line"><span class="comment">// =&gt; "06/12/2017"</span></div></pre></td></tr></table></figure></p><p>特别注意下上面第二个示例中，函数的参数和match返回值的顺序与对应关系。</p><p><strong>2.3 正则中反向引用</strong></p><p>除了使用相应API来引用分组，也可以在正则本身里引用分组，但只能引用之前出现的分组，即反向引用。<br>示例，需要一个正则表达式，匹配分隔符前后一致的时间字符串：<br><img src="/blog/img/17.9.30.2.jpg" alt="反向引用"></p><ul><li><p><code>括号嵌套</code><br>可以理解成，反向引用是引用的括号分组起来的数据，最外层的括号级别最高，所以，\1代表的是最外层的分组</p></li><li><p><code>\10的含义</code><br>\10表示第10个分组，如果要匹配\1 和 0，使用(?:\1)0</p></li><li><p><code>引用不存在的分组</code><br>在正则里引用不存在的分组时，不会报错，只是匹配反向引用的字符本身（\2就匹配’\2’）</p></li><li><p><code>分组后有量词</code><br>分组后有量词的话，分组最终捕获到的数据是最后一次的匹配。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> regex = <span class="regexp">/(\d)+ \1/</span>;</div><div class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"12345 1"</span>) );</div><div class="line"><span class="comment">// =&gt; false</span></div><div class="line"><span class="built_in">console</span>.log( regex.test(<span class="string">"12345 5"</span>) );</div><div class="line"><span class="comment">// =&gt; true</span></div></pre></td></tr></table></figure></li><li><p><code>非捕获括号</code><br>正则中出现的括号，都会捕获它们匹配到的数据，以便后续引用，称之为捕获型分组<br>如果只想要括号最原始的功能，不引用它，既不在API里引用，也不在正则里反向引用。</p></li></ul><hr><h2 id="正则表达式回溯"><a href="#正则表达式回溯" class="headerlink" title="正则表达式回溯"></a><strong>正则表达式回溯</strong></h2><p>本质上就是深度优先搜索算法。其中退到之前的某一步这一过程，我们称为“回溯”。从下图中，可以看出，路走不通时，就会发生“回溯”。即，尝试匹配失败时，接下来的一步通常就是回溯。</p><p><strong>1.1 有回溯的匹配</strong><br><img src="/blog/img/17.10.7.1.jpg" alt="有回溯的匹配"></p><p><strong>2.1 常见的回溯形式</strong></p><ul><li><p><code>贪婪量词，b{1,3}</code><br>因为其是贪婪的，尝试可能的顺序是从多往少的方向去尝试。首先会尝试 “bbb”，然后再看整个正则是否能匹配。不能匹配时，吐出一个 “b”，即在 “bb” 的基础上，再继续尝试。如果还不行，再吐出一个，再试。如果还不行呢？只能说明匹配失败了。</p></li><li><p><code>惰性量词， \d{1,3}?</code><br>惰性量词就是在贪婪量词后面加个问号，表示尽可能少的匹配。<br>虽然惰性量词不贪，但也会有回溯的现象。<br>知道你不贪、很知足，但是为了整体匹配成，没办法，也只能给你多塞点了。因此最后 \d{1,3}? 匹配的字符是 “12”，是两个数字，而不是一个。</p></li><li><p><code>分支结构，/can|candy/</code><br>分支结构，可能前面的子模式会形成了局部匹配，如果接下来表达式整体不匹配时，仍会继续尝试剩下的分支。这种尝试也可以看成一种回溯。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;可视化工具&lt;/li&gt;
&lt;li&gt;正则表达式括号的作用&lt;/li&gt;
&lt;li&gt;正则表达式回溯&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
